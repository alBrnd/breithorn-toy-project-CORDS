test.x
test
?plot
# Import melt.R functions
source("../src/melt.R")
# Define the synthetic weather and glacier
synthetic_T <- function(t){
T <- -10 * cos(2 * pi / 365 * t) - 8 * cos(2 * pi * t) + 5
return(T)
}
synthetic_P <- function(t){
return(rep(0.008, length(t)))
}
synthetic_glacier <- function(){
x <- seq(from=0, to=10, length.out=100)  # x coordinates
elevation <- seq(from=1000, to=2000, length.out=100)
res <- data.frame(
x = x,
elevation = elevation
)
return(res)
}
# Define constants
lapse_rate <- -0.6 / 100
melt_factor <- 0.005
T_threshold <- 4
dt <- 1 / 24
t <- seq(from=0, to=365 + dt, by=dt)
# Plot the synthetic weather
Ts <- synthetic_T(t)
plot(t,Ts, main="Synthetic Temperature", xlab='Time (days)', ylab='Temperature (°C)')
plot(t,Ts, main="Synthetic Temperature", xlab='Time (days)', ylab='Temperature (°C)', type = 'l')
# Run the model for one year at a point
ele <- 1500
Ts_ele <- melt.lapse(Ts, dt, lapse_rate)
Ts_ele <- lapse(Ts, dt, lapse_rate)
Ps <- synthetic_P(t)
net_balance_fn(dt, Ts, Ps, melt_factor, T_threshold)
# Import melt.R functions
source("../src/melt.R")
# Define the synthetic weather and glacier
synthetic_T <- function(t){
T <- -10 * cos(2 * pi / 365 * t) - 8 * cos(2 * pi * t) + 5
return(T)
}
synthetic_P <- function(t){
return(rep(0.008, length(t)))
}
synthetic_glacier <- function(){
x <- seq(from=0, to=10, length.out=100)  # x coordinates
elevation <- seq(from=1000, to=2000, length.out=100)
res <- data.frame(
x = x,
elevation = elevation
)
return(res)
}
# Define constants
lapse_rate <- -0.6 / 100
melt_factor <- 0.005
T_threshold <- 4
dt <- 1 / 24
t <- seq(from=0, to=365 + dt, by=dt)
# Plot the synthetic weather
Ts <- synthetic_T(t)
plot(t,Ts, main="Synthetic Temperature", xlab='Time (days)', ylab='Temperature (°C)', type = 'l')
# Run the model for one year at a point
ele <- 1500
Ts_ele <- lapse(Ts, dt, lapse_rate)
Ps <- synthetic_P(t)
net_balance_fn(dt, Ts, Ps, melt_factor, T_threshold)
# Import melt.R functions
source("../src/melt.R")
# Define the synthetic weather and glacier
synthetic_T <- function(t){
T <- -10 * cos(2 * pi / 365 * t) - 8 * cos(2 * pi * t) + 5
return(T)
}
synthetic_P <- function(t){
return(rep(0.008, length(t)))
}
synthetic_glacier <- function(){
x <- seq(from=0, to=10, length.out=100)  # x coordinates
elevation <- seq(from=1000, to=2000, length.out=100)
res <- data.frame(
x = x,
elevation = elevation
)
return(res)
}
# Define constants
lapse_rate <- -0.6 / 100
melt_factor <- 0.005
T_threshold <- 4
dt <- 1 / 24
t <- seq(from=0, to=365 + dt, by=dt)
# Plot the synthetic weather
Ts <- synthetic_T(t)
plot(t,Ts, main="Synthetic Temperature", xlab='Time (days)', ylab='Temperature (°C)', type = 'l')
# Run the model for one year at a point
ele <- 1500
Ts_ele <- lapse(Ts, dt, lapse_rate)
Ps <- synthetic_P(t)
net_balance_fn(dt, Ts, Ps, melt_factor, T_threshold)
synthetic_glacier()[1,]
synthetic_glacier()[,1]
# Run the model for one year for the whole glacier
xs <- synthetic_glacier()[,1]
zs <- synthetic_glacier()[,2]
Ts <- synthetic_T(t)
test <- glacier_net_balance_fn(zs, dt, Ts, Ps, melt_factor, T_threshold, lapse_rate)
# Import melt.R functions
source("../src/melt.R")
# Define the synthetic weather and glacier
synthetic_T <- function(t){
T <- -10 * cos(2 * pi / 365 * t) - 8 * cos(2 * pi * t) + 5
return(T)
}
synthetic_P <- function(t){
return(rep(0.008, length(t)))
}
synthetic_glacier <- function(){
x <- seq(from=0, to=10, length.out=100)  # x coordinates
elevation <- seq(from=1000, to=2000, length.out=100)
res <- data.frame(
x = x,
elevation = elevation
)
return(res)
}
# Define constants
lapse_rate <- -0.6 / 100
melt_factor <- 0.005
T_threshold <- 4
dt <- 1 / 24
t <- seq(from=0, to=365 + dt, by=dt)
# Plot the synthetic weather
Ts <- synthetic_T(t)
plot(t,Ts, main="Synthetic Temperature", xlab='Time (days)', ylab='Temperature (°C)', type = 'l')
# Run the model for one year at a point
ele <- 1500
Ts_ele <- lapse(Ts, dt, lapse_rate)
Ps <- synthetic_P(t)
net_balance_fn(dt, Ts, Ps, melt_factor, T_threshold)
# Run the model for one year for the whole glacier
xs <- synthetic_glacier()[,1]
zs <- synthetic_glacier()[,2]
Ts <- synthetic_T(t)
test <- glacier_net_balance_fn(zs, dt, Ts, Ps, melt_factor, T_threshold, lapse_rate)
View(test)
# Append the results to the list
out <- data.frame(
dt = Ts_,
total_massbalance = total_MB,
point_massbalance =  point_MB
)
# Import melt.R functions
source("../src/melt.R")
# Define the synthetic weather and glacier
synthetic_T <- function(t){
T <- -10 * cos(2 * pi / 365 * t) - 8 * cos(2 * pi * t) + 5
return(T)
}
synthetic_P <- function(t){
return(rep(0.008, length(t)))
}
synthetic_glacier <- function(){
x <- seq(from=0, to=10, length.out=100)  # x coordinates
elevation <- seq(from=1000, to=2000, length.out=100)
res <- data.frame(
x = x,
elevation = elevation
)
return(res)
}
# Define constants
lapse_rate <- -0.6 / 100
melt_factor <- 0.005
T_threshold <- 4
dt <- 1 / 24
t <- seq(from=0, to=365 + dt, by=dt)
# Plot the synthetic weather
Ts <- synthetic_T(t)
plot(t,Ts, main="Synthetic Temperature", xlab='Time (days)', ylab='Temperature (°C)', type = 'l')
# Run the model for one year at a point
ele <- 1500
Ts_ele <- lapse(Ts, dt, lapse_rate)
Ps <- synthetic_P(t)
net_balance_fn(dt, Ts, Ps, melt_factor, T_threshold)
# Run the model for one year for the whole glacier
xs <- synthetic_glacier()[,1]
zs <- synthetic_glacier()[,2]
Ts <- synthetic_T(t)
total_massbalance <- glacier_net_balance_fn(zs, dt, Ts, Ps, melt_factor, T_threshold, lapse_rate)[,1]
point_massbalance <- glacier_net_balance_fn(zs, dt, Ts, Ps, melt_factor, T_threshold, lapse_rate)[,2]
plot(xs, point_massbalance, main='Glacier Mass Balance', ylab='Mass balance', xlab='Distance (km)')
## Generate output table
# make a table of mass-balance for different temperature offsets and store it
# Loop over temperature offsets and store the results in a DataFrame
total_MB
dT
# Import melt.R functions
source("../src/melt.R")
# Define the synthetic weather and glacier
synthetic_T <- function(t){
T <- -10 * cos(2 * pi / 365 * t) - 8 * cos(2 * pi * t) + 5
return(T)
}
synthetic_P <- function(t){
return(rep(0.008, length(t)))
}
synthetic_glacier <- function(){
x <- seq(from=0, to=10, length.out=100)  # x coordinates
elevation <- seq(from=1000, to=2000, length.out=100)
res <- data.frame(
x = x,
elevation = elevation
)
return(res)
}
# Define constants
lapse_rate <- -0.6 / 100
melt_factor <- 0.005
T_threshold <- 4
dt <- 1 / 24
t <- seq(from=0, to=365 + dt, by=dt)
# Plot the synthetic weather
Ts <- synthetic_T(t)
plot(t,Ts, main="Synthetic Temperature", xlab='Time (days)', ylab='Temperature (°C)', type = 'l')
# Run the model for one year at a point
ele <- 1500
Ts_ele <- lapse(Ts, dt, lapse_rate)
Ps <- synthetic_P(t)
net_balance_fn(dt, Ts, Ps, melt_factor, T_threshold)
# # Run the model for one year for the whole glacier
# xs <- synthetic_glacier()[,1]
# zs <- synthetic_glacier()[,2]
# Ts <- synthetic_T(t)
#
# total_massbalance <- glacier_net_balance_fn(zs, dt, Ts, Ps, melt_factor, T_threshold, lapse_rate)[,1]
# point_massbalance <- glacier_net_balance_fn(zs, dt, Ts, Ps, melt_factor, T_threshold, lapse_rate)[,2]
# plot(xs, point_massbalance, main='Glacier Mass Balance', ylab='Mass balance', xlab='Distance (km)')
## Generate output table
# make a table of mass-balance for different temperature offsets and store it
# # Loop over temperature offsets and store the results in a DataFrame
# total_MB
# point_MB
# Ts_ <- seq(-4,5,by=dT)
# for(dT in -4:5) {
#   total_MB <- c(total_MB, glacier_net_balance_fn(zs, dT, Ts_, Ps, melt_factor, T_threshold, lapse_rate)[,1])
#   point_MB <- c(point_MB, glacier_net_balance_fn(zs, dT, Ts_, Ps, melt_factor, T_threshold, lapse_rate)[,2])
# }
#
# # Append the results to the list
# out <- data.frame(
#   dt = Ts_,
#   total_massbalance = total_MB,
#   point_massbalance =  point_MB
# )
#
# # Convert the list of results to a DataFrame
# df = pd.DataFrame(out)
#
# # Display the DataFrame
# print(df)
system("git rev-parse HEAD", intern=TRUE)
fullHash <- system("git rev-parse HEAD", intern=TRUE)
stringr::str_trunc(fullHash, 10))
stringr::str_trunc(fullHash, 10)
fullHash[1:10]
substring(fullHash,1, 10)
# Import melt.R functions
source("../src/melt.R")
source("../src/utils.R")
# Define the synthetic weather and glacier
synthetic_T <- function(t){
T <- -10 * cos(2 * pi / 365 * t) - 8 * cos(2 * pi * t) + 5
return(T)
}
synthetic_P <- function(t){
return(rep(0.008, length(t)))
}
synthetic_glacier <- function(){
x <- seq(from=0, to=10, length.out=100)  # x coordinates
elevation <- seq(from=1000, to=2000, length.out=100)
res <- data.frame(
x = x,
elevation = elevation
)
return(res)
}
# Define constants
lapse_rate <- -0.6 / 100
melt_factor <- 0.005
T_threshold <- 4
dt <- 1 / 24
t <- seq(from=0, to=365 + dt, by=dt)
# Plot the synthetic weather
Ts <- synthetic_T(t)
plot(t,Ts, main="Synthetic Temperature", xlab='Time (days)', ylab='Temperature (°C)', type = 'l')
# Run the model for one year at a point
ele <- 1500
Ts_ele <- lapse(Ts, dt, lapse_rate)
Ps <- synthetic_P(t)
net_balance_fn(dt, Ts, Ps, melt_factor, T_threshold)
# # Run the model for one year for the whole glacier
# xs <- synthetic_glacier()[,1]
# zs <- synthetic_glacier()[,2]
# Ts <- synthetic_T(t)
#
# total_massbalance <- glacier_net_balance_fn(zs, dt, Ts, Ps, melt_factor, T_threshold, lapse_rate)[,1]
# point_massbalance <- glacier_net_balance_fn(zs, dt, Ts, Ps, melt_factor, T_threshold, lapse_rate)[,2]
# plot(xs, point_massbalance, main='Glacier Mass Balance', ylab='Mass balance', xlab='Distance (km)')
## Generate output table
# make a table of mass-balance for different temperature offsets and store it
# # Loop over temperature offsets and store the results in a DataFrame
# total_MB
# point_MB
# Ts_ <- seq(-4,5,by=dT)
# for(dT in -4:5) {
#   total_MB <- c(total_MB, glacier_net_balance_fn(zs, dT, Ts_, Ps, melt_factor, T_threshold, lapse_rate)[,1])
#   point_MB <- c(point_MB, glacier_net_balance_fn(zs, dT, Ts_, Ps, melt_factor, T_threshold, lapse_rate)[,2])
# }
#
# # Append the results to the list
# out <- data.frame(
#   dt = Ts_,
#   total_massbalance = total_MB,
#   point_massbalance =  point_MB
# )
#
# # Convert the list of results to a DataFrame
# df = pd.DataFrame(out)
#
# # Display the DataFrame
# print(df)
## EXPORT THE RESULTS
plots.dir.path <- list.files(tempdir(), pattern="rs-graphics", full.names = TRUE)
plots.png.paths <- list.files(plots.dir.path, pattern=".png", full.names = TRUE)
file.copy(from=plots.png.paths, to="../res/")
# Import melt.R functions
source("../src/melt.R")
source("../src/utils.R")
# Define the synthetic weather and glacier
synthetic_T <- function(t){
T <- -10 * cos(2 * pi / 365 * t) - 8 * cos(2 * pi * t) + 5
return(T)
}
synthetic_P <- function(t){
return(rep(0.008, length(t)))
}
synthetic_glacier <- function(){
x <- seq(from=0, to=10, length.out=100)  # x coordinates
elevation <- seq(from=1000, to=2000, length.out=100)
res <- data.frame(
x = x,
elevation = elevation
)
return(res)
}
# Define constants
lapse_rate <- -0.6 / 100
melt_factor <- 0.005
T_threshold <- 4
dt <- 1 / 24
t <- seq(from=0, to=365 + dt, by=dt)
# Plot the synthetic weather
Ts <- synthetic_T(t)
plot(t,Ts, main="Synthetic Temperature", xlab='Time (days)', ylab='Temperature (°C)', type = 'l')
# Run the model for one year at a point
ele <- 1500
Ts_ele <- lapse(Ts, dt, lapse_rate)
Ps <- synthetic_P(t)
net_balance_fn(dt, Ts, Ps, melt_factor, T_threshold)
# # Run the model for one year for the whole glacier
# xs <- synthetic_glacier()[,1]
# zs <- synthetic_glacier()[,2]
# Ts <- synthetic_T(t)
#
# total_massbalance <- glacier_net_balance_fn(zs, dt, Ts, Ps, melt_factor, T_threshold, lapse_rate)[,1]
# point_massbalance <- glacier_net_balance_fn(zs, dt, Ts, Ps, melt_factor, T_threshold, lapse_rate)[,2]
# plot(xs, point_massbalance, main='Glacier Mass Balance', ylab='Mass balance', xlab='Distance (km)')
## Generate output table
# make a table of mass-balance for different temperature offsets and store it
# # Loop over temperature offsets and store the results in a DataFrame
# total_MB
# point_MB
# Ts_ <- seq(-4,5,by=dT)
# for(dT in -4:5) {
#   total_MB <- c(total_MB, glacier_net_balance_fn(zs, dT, Ts_, Ps, melt_factor, T_threshold, lapse_rate)[,1])
#   point_MB <- c(point_MB, glacier_net_balance_fn(zs, dT, Ts_, Ps, melt_factor, T_threshold, lapse_rate)[,2])
# }
#
# # Append the results to the list
# out <- data.frame(
#   dt = Ts_,
#   total_massbalance = total_MB,
#   point_massbalance =  point_MB
# )
#
# # Convert the list of results to a DataFrame
# df = pd.DataFrame(out)
#
# # Display the DataFrame
# print(df)
list.files(tempdir(), pattern="rs-graphics", full.names = TRUE)
## EXPORT THE RESULTS
plots.dir.path <- list.files(tempdir(), pattern="rs-graphics", full.names = TRUE)
plots.png.paths <- list.files(plots.dir.path, pattern=".png", full.names = TRUE)
plots.png.paths
file.copy(from=plots.dir.path, to="../res/")
## EXPORT THE RESULTS
plots.dir.path <- list.files(tempdir(), pattern="rs-graphics", full.names = TRUE)
plots.dir.path
png(filename="../res/test.png")
plot(t,Ts, main="Synthetic Temperature", xlab='Time (days)', ylab='Temperature (°C)', type = 'l')
dev.off()
Sys.Date()
basename()
current_filename()
current_source_filename()
source()
print(sub(".*=", "", commandArgs()[4]))
paste0('GlacierMassBalance',Sys.Date())
# Store the git hash in the results folder
gitHash(paste0(Sys.Date(),'GlacierMassBalance'),'txt')
git status
R CMD BATCH -- git status
system('git status')
system('git log')
?write
write(gitLog, file = gitHash(paste0(Sys.Date(),'GlacierMassBalance'),'txt'), append = FALSE)
gitLog <- system('git log')
write(gitLog, file = gitHash(paste0(Sys.Date(),'GlacierMassBalance'),'txt'), append = FALSE)
gitLog <- system('git log')
gitLog <- system('git status')
gitLog <- system('git status', intern = TRUE)
write(gitLog, file = gitHash(paste0(Sys.Date(),'GlacierMassBalance'),'txt'), append = FALSE)
write(gitLog, file = gitHash(paste0('../res/',Sys.Date(),'GlacierMassBalance'),'txt'), append = FALSE)
gitLog <- system('git log', intern = TRUE)
write(gitLog, file = gitHash(paste0('../res/',Sys.Date(),'GlacierMassBalance'),'txt'), append = FALSE)
# Import melt.R functions
source("../src/melt.R")
source("../src/utils.R")
# Define the synthetic weather and glacier
synthetic_T <- function(t){
T <- -10 * cos(2 * pi / 365 * t) - 8 * cos(2 * pi * t) + 5
return(T)
}
synthetic_P <- function(t){
return(rep(0.008, length(t)))
}
synthetic_glacier <- function(){
x <- seq(from=0, to=10, length.out=100)  # x coordinates
elevation <- seq(from=1000, to=2000, length.out=100)
res <- data.frame(
x = x,
elevation = elevation
)
return(res)
}
# Define constants
lapse_rate <- -0.6 / 100
melt_factor <- 0.005
T_threshold <- 4
dt <- 1 / 24
t <- seq(from=0, to=365 + dt, by=dt)
# Plot the synthetic weather
Ts <- synthetic_T(t)
png(filename=gitHash(paste0('../res/',Sys.Date(),'SyntheticTemperature'),'png')) # To export the file
plot(t,Ts, main="Synthetic Temperature", xlab='Time (days)', ylab='Temperature (°C)', type = 'l')
dev.off()
# Run the model for one year at a point
ele <- 1500
Ts_ele <- lapse(Ts, dt, lapse_rate)
Ps <- synthetic_P(t)
net_balance_fn(dt, Ts, Ps, melt_factor, T_threshold)
# # Run the model for one year for the whole glacier
# xs <- synthetic_glacier()[,1]
# zs <- synthetic_glacier()[,2]
# Ts <- synthetic_T(t)
#
# total_massbalance <- glacier_net_balance_fn(zs, dt, Ts, Ps, melt_factor, T_threshold, lapse_rate)[,1]
# point_massbalance <- glacier_net_balance_fn(zs, dt, Ts, Ps, melt_factor, T_threshold, lapse_rate)[,2]
# plot(xs, point_massbalance, main='Glacier Mass Balance', ylab='Mass balance', xlab='Distance (km)')
## Generate output table
# make a table of mass-balance for different temperature offsets and store it
# # Loop over temperature offsets and store the results in a DataFrame
# total_MB
# point_MB
# Ts_ <- seq(-4,5,by=dT)
# for(dT in -4:5) {
#   total_MB <- c(total_MB, glacier_net_balance_fn(zs, dT, Ts_, Ps, melt_factor, T_threshold, lapse_rate)[,1])
#   point_MB <- c(point_MB, glacier_net_balance_fn(zs, dT, Ts_, Ps, melt_factor, T_threshold, lapse_rate)[,2])
# }
#
# # Append the results to the list
# out <- data.frame(
#   dt = Ts_,
#   total_massbalance = total_MB,
#   point_massbalance =  point_MB
# )
#
# # Convert the list of results to a DataFrame
# df = pd.DataFrame(out)
#
# # Display the DataFrame
# print(df)
# Store the git hash in the results folder
gitHash(paste0(Sys.Date(),'GlacierMassBalance'),'txt')
gitLog <- system('git log', intern = TRUE)
write(gitLog, file = gitHash(paste0('../res/',Sys.Date(),'GitLog'),'txt'), append = FALSE)
